<?xml version="1.0" encoding="UTF-8"?>
<!--
    $Id$

    Copyright (C) 2003-2015 JNode.org

    This library is free software; you can redistribute it and/or modify it
    under the terms of the GNU Lesser General Public License as published
    by the Free Software Foundation; either version 2.1 of the License, or
    (at your option) any later version.

    This library is distributed in the hope that it will be useful, but
    WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public
    License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with this library; If not, write to the Free Software Foundation, Inc.,
    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
-->
<project name="JNode-Core" default="all" basedir=".">

  <typedef file="${basedir}/../all/lib/jnode.xml"/>
		
  <property name="my-build.dir" value="${basedir}/build"/>
  <property name="my-gen.dir" value="${my-build.dir}/gen"/>
  <property name="my-gen-plan.dir" value="${my-build.dir}/gen-plan"/>
  <property name="my-classes.dir" value="${my-build.dir}/classes"/>
  <property name="my-testclasses.dir" value="${my-build.dir}/testclasses"/>
  <property name="my-classes-plan.dir" value="${my-build.dir}/classes-plan"/>
  <property name="my-src.dir" value="${basedir}/src"/>
  <property name="my-non-resources" value="**/*.java,**/package.html"/>
	
  <!-- Subproject specific classpath -->
  <path id="my-cp">
    
  	<!--
  	<pathelement location="${mauve.jar}"/>
  	<pathelement location="${junit.jar}"/>
  	-->    
  	<pathelement location="lib/openjdk/java.base.jar"/>
  	<pathelement location="${mmtk.jar}"/>
  	<path refid="cp"/>
  </path>

  <!-- the sources that we have to compile -->
  <path id="classpath-sources">
  	<!--
	<pathelement location="${my-src.dir}/classpath/gnu"/>
	<pathelement location="${my-src.dir}/classpath/java"/>
	<pathelement location="${my-src.dir}/classpath/javax"/>
	<pathelement location="${my-src.dir}/classpath/tools"/>
	<pathelement location="${my-src.dir}/openjdk/java"/>
	<pathelement location="${my-src.dir}/openjdk/javax"/>
	<pathelement location="${my-src.dir}/openjdk/org"/>
	<pathelement location="${my-src.dir}/openjdk/com"/>
	<pathelement location="${my-src.dir}/openjdk/sun"/>
	<pathelement location="${my-src.dir}/openjdk/svm"/>
    <pathelement location="${my-src.dir}/icedtea"/>
    <pathelement location="${my-src.dir}/classlib"/>
  	-->
  </path>
  <path id="classpath-sources-vm">
  	<!--
    <pathelement location="${my-src.dir}/classpath/ext"/>  
    <pathelement location="${my-src.dir}/classpath/vm"/>
  	
    <pathelement location="${my-src.dir}/openjdk/vm"/>
  	-->
  </path>
  <path id="classpath-sources-corba">
  	<!--
    <pathelement location="${my-src.dir}/openjdk/corba"/>
    -->
  </path>
  <path id="classpath-sources-jaxws">
  	<!--
    <pathelement location="${my-src.dir}/openjdk/jaxws"/>
    -->
  </path>
  <path id="classpath-sources-langtools">
  	<!--
    <pathelement location="${my-src.dir}/openjdk/langtools"/>
    -->
  </path>
  <path id="my-sources1">
	<path refid="classpath-sources-vm"/>
	<pathelement location="${my-src.dir}/core"/>
	<pathelement location="${my-src.dir}/endorsed/nanoxml"/>
	<pathelement location="${my-src.dir}/vmmagic"/>
	<pathelement location="${my-src.dir}/mmtk-vm"/>
	<pathelement location="${my-src.dir}/driver"/>
	<pathelement location="${my-src.dir}/emu"/>
	<pathelement location="${my-src.dir}/testframework"/>
	</path>
  <path id="my-sources">
	<path refid="my-sources1"/>
	<pathelement location="${my-gen.dir}"/>
  </path>
  <path id="my-testsources">
	<pathelement location="${my-src.dir}/test"/>
  </path>
  		
  <macrodef name="ExpandTest">
    <attribute name="classname"/>
    <attribute name="type"/>
    <attribute name="template" default="${my-src.dir}/test/org/jnode/test/PrimitiveTest.jtemplate"/>
    <sequential>
      <copy tofile="${my-gen.dir}/org/jnode/test/@{classname}.java" file="@{template}">
        <filterset>
          <filter token="classname" value="@{classname}"/>
          <filter token="type" value="@{type}"/>
        </filterset>
      </copy>
    </sequential>
  </macrodef>
	
	<path id="plan-cp">
		<pathelement location=""/>
		<pathelement location="${jnode-code.jar}"/>
		<pathelement location="${mmtk.jar}"/>
	</path>

  <macrodef name="CreatePlan">
    <attribute name="package"/>
    <sequential>
      <copy tofile="${my-gen-plan.dir}/@{package}/org/mmtk/vm/Plan.java" 
      	    file="${my-src.dir}/mmtk-vm/org/mmtk/vm/Plan.template">
        <filterset>
          <filter token="PKG" value="@{package}"/>
        </filterset>
      </copy>
      <copy tofile="${my-gen-plan.dir}/@{package}/org/mmtk/vm/PlanConstants.java" 
      	    file="${my-src.dir}/mmtk-vm/org/mmtk/vm/PlanConstants.template">
        <filterset>
          <filter token="PKG" value="@{package}"/>
        </filterset>
      </copy>
      <mkdir dir="${my-classes-plan.dir}/@{package}/"/>
      <jnode.compile destdir="${my-classes-plan.dir}/@{package}/">
      	<!--
      	<modulesourcepath path="build/src/" />
      	<upgrademodulepath refid="my-cp" />
      	-->
        <src path="${my-gen-plan.dir}/@{package}/"/>
      	<classpath>
      		<!--
     		<pathelement location="${classlib.jar}"/>
      		-->
      		<pathelement location="lib/openjdk/java.base.jar"/>
     		<pathelement location="${jnode-core.jar}"/>
     		<pathelement location="${mmtk.jar}"/>      		
      	</classpath>
      </jnode.compile>
    </sequential>
  </macrodef>

	<path id="template-cp">
		<pathelement location="${jnode-builder.jar}"/>
		<pathelement location="../core/lib/openjdk/java.base.jar"/>
		<path refid="cp"/>
	</path>
	
  <!-- Initialize all subproject directories -->
  <target name="prepare">
  	<echo message="prepare core"></echo>
  	
    <mkdir dir="${my-classes.dir}"/>
    <mkdir dir="${my-testclasses.dir}"/>
    <mkdir dir="${my-gen.dir}"/>
  	<jnode.copy-descriptors/>

  	<copy todir="${my-classes.dir}">
      <fileset dir="${my-src.dir}/classpath/vm" includes="**/*.security"/>
      <fileset dir="${my-src.dir}/openjdk/vm" includes="**/*.jav"/>
    </copy>
    <ExpandTest classname="PrimitiveIntTest" type="int"/>
    <ExpandTest classname="PrimitiveLongTest" type="long"/>
    <ExpandTest classname="PrimitiveFloatTest" type="float"/>
    <ExpandTest classname="PrimitiveDoubleTest" type="double"/>

    <taskdef name="template" classname="org.jnode.ant.taskdefs.TemplateTask" classpathref="cp-jnode"/>
      	
  	<!--
    <java fork="true" classname="org.jnode.ant.taskdefs.TemplateTask">
    	<modulepath refid="template-cp"/>
    	<arg line="-file ${my-src.dir}/template/org/jnode/vm/VmSystemSettings.java"/>
    	<arg line="-toFile ${my-gen.dir}/org/jnode/vm/VmSystemSettings.java"/>
    	<arg line="-token @java.home@ ${jnode.java.home}" />
    	<arg line="-token @java.io.tmpdir@ ${jnode.java.io.tmpdir}" />
		<arg line="-token @user.home@ ${jnode.java.home}" />    	
    </java>
  	-->

  	<!--
  	<copy file="${my-src.dir}/template/org/jnode/vm/VmSystemSettings.java" tofile="${my-gen.dir}/org/jnode/vm/VmSystemSettings.java" />
  	
  	<replace file="${my-gen.dir}/org/jnode/vm/VmSystemSettings.java">
  	  <replacefilter token="@java.home@" value="${jnode.java.home}"/>
  	  <replacefilter token="@java.io.tmpdir@" value="${jnode.java.io.tmpdir}"/>
  	  <replacefilter token="@user.home@" value="${jnode.java.home}"/>
  	</replace>
	-->  	
  	
    <template file="${my-src.dir}/template/org/jnode/vm/VmSystemSettings.java"
          tofile="${my-gen.dir}/org/jnode/vm/VmSystemSettings.java">
        <token name="@java.home@" value="${jnode.java.home}"/>
        <token name="@java.io.tmpdir@" value="${jnode.java.io.tmpdir}"/>
        <token name="@user.home@" value="${jnode.user.home}"/>
    </template>
    
    
  	<!--
  	<java fork="true" classname="org.jnode.ant.taskdefs.TemplateTask">
  		<modulepath refid="template-cp"/>
    	<arg line="-file ${my-src.dir}/template/org/jnode/security/JNodeSecurityManagerSettings.java"/>
    	<arg line="-toFile ${my-gen.dir}/org/jnode/security/JNodeSecurityManagerSettings.java"/>
    	<arg line="-token @jnode.security.enabled@ ${jnode.security.enabled}" />
    </java>
  	-->
  	
  	<!--
  	<copy file="${my-src.dir}/template/org/jnode/security/JNodeSecurityManagerSettings.java" tofile="${my-gen.dir}/org/jnode/security/JNodeSecurityManagerSettings.java" />
  	  	
  	<replace file="${my-gen.dir}/org/jnode/security/JNodeSecurityManagerSettings.java">
  	  <replacefilter token="@jnode.security.enabled@" value="${jnode.security.enabled}"/>
  	</replace>
  	-->

    <template file="${my-src.dir}/template/org/jnode/security/JNodeSecurityManagerSettings.java"
          tofile="${my-gen.dir}/org/jnode/security/JNodeSecurityManagerSettings.java">
        <token name="@jnode.security.enabled@" value="${jnode.security.enabled}"/>
    </template>
  	
  	<copy todir="build/src/org.jnode.core">
  		<fileset dir="${my-src.dir}/classpath/ext" />
  		<fileset dir="${my-src.dir}/classpath/vm"/>
  		<!--
  		<fileset dir="${my-src.dir}/openjdk/vm"/>
  		-->
		<fileset dir="src/classlib"/>
		<fileset dir="${my-src.dir}/core"/>
		<fileset dir="${my-src.dir}/endorsed/nanoxml"/>
		<fileset dir="${my-src.dir}/vmmagic"/>
  		
  		<fileset dir="${my-src.dir}/driver"/>
  		<fileset dir="${my-src.dir}/emu"/>
		<fileset dir="${my-src.dir}/testframework"/>
  		<fileset dir="${my-src.dir}/mmtk-vm"/>
		<fileset dir="${my-gen.dir}"/>
		<fileset dir="src/org.jnode.core"/>
  	</copy>
  	
  </target>

  <!-- Compile all subproject java files -->
  <target name="compile" depends="prepare">
      <jnode.compile>
      	<modulesourcepath path="build/src/" />
      	<upgrademodulepath refid="my-cp" />
      </jnode.compile>
  	
  	<!--
  	<jnode.compile>
  	        <src refid="my-sources" />
  	        <classpath refid="my-cp"/>
  	</jnode.compile>
  	-->
  	  	
  	<!--
      <jnode.compile.test>
        <src refid="my-testsources" />
        <classpath refid="my-cp"/>
      </jnode.compile.test>
  		-->
      <!--
      <jnode.compile>
        <src refid="classpath-sources-corba" />
        <classpath refid="my-cp"/>
      </jnode.compile>
      <jnode.compile>
        <src refid="classpath-sources-jaxws" />
        <classpath refid="my-cp"/>
      </jnode.compile>
      <jnode.compile>
        <src refid="classpath-sources-langtools" />
        <classpath refid="my-cp"/>
      </jnode.compile>
      -->

    <!-- Copy all non java files to class dir -->
    <copy todir="${my-classes.dir}">
	    <fileset dir="${my-src.dir}/classpath/ext" excludes="${my-non-resources}"/>
	    <fileset dir="${my-src.dir}/classpath/vm" excludes="${my-non-resources}"/>
	    <fileset dir="${my-src.dir}/openjdk/vm" excludes="${my-non-resources}"/>
	    <fileset dir="${my-src.dir}/core" excludes="${my-non-resources}"/>
	    <fileset dir="${my-src.dir}/endorsed/nanoxml" excludes="${my-non-resources}"/>
	    <fileset dir="${my-src.dir}/vmmagic" excludes="${my-non-resources}"/>
	    <fileset dir="${my-src.dir}/mmtk-vm" excludes="${my-non-resources}"/>
	    <fileset dir="${my-src.dir}/driver" excludes="${my-non-resources}"/>
	    <fileset dir="${my-src.dir}/testframework" excludes="${my-non-resources}"/>
	</copy>
    <copy todir="${my-testclasses.dir}">
	    <fileset dir="${my-src.dir}/test" excludes="${my-non-resources}"/>
    </copy>
    
  	<!-- Create & compile plan classes -->  
	<CreatePlan package="org.jnode.vm.memmgr.mmtk.genrc"/>
	<CreatePlan package="org.jnode.vm.memmgr.mmtk.ms"/>
	<CreatePlan package="org.jnode.vm.memmgr.mmtk.nogc"/>
	
  </target>
	
  <!-- Assemble the jarfile -->
  <target name="assemble" depends="compile">
  </target>

  <!-- Do it all -->
  <target name="all" depends="assemble"/>

  <!-- Clean everything -->
  <target name="clean">
  	<jnode.clean/>
  </target>

</project>


